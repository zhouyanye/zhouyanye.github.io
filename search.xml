<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言 学习笔记</title>
    <url>/2024/11/14/20/</url>
    <content><![CDATA[<h2 id="C语言介绍"><a href="#C语言介绍" class="headerlink" title="C语言介绍"></a>C语言介绍</h2><h2 id="C语言安装"><a href="#C语言安装" class="headerlink" title="C语言安装"></a>C语言安装</h2><h2 id="我的第一个程序"><a href="#我的第一个程序" class="headerlink" title="我的第一个程序"></a>我的第一个程序</h2><figure class="highlight c"><figcaption><span>main.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);  </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C语言的注释"><a href="#C语言的注释" class="headerlink" title="C语言的注释"></a>C语言的注释</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 这是单行注释 </span><br><span class="line">/* 这是多行注释 */</span><br></pre></td></tr></table></figure>

<h2 id="C语言的关建字"><a href="#C语言的关建字" class="headerlink" title="C语言的关建字"></a>C语言的关建字</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">auto break case char const continue</span><br><span class="line">default do double else enum extern</span><br><span class="line">float for goto if inline int</span><br><span class="line">long register restrict return short</span><br><span class="line">signed sizeof static struct </span><br><span class="line">switch typedef union unsigned void volatile while</span><br></pre></td></tr></table></figure>

<h2 id="C语言的标识符命名规则"><a href="#C语言的标识符命名规则" class="headerlink" title="C语言的标识符命名规则"></a>C语言的标识符命名规则</h2><ol>
<li>标识符只能由字母、数字、下划线组成，不能以数字开头。</li>
<li>不能包含除下划线以外的特殊字符。</li>
<li>不能和关键字重名。</li>
<li>区分大小写。</li>
</ol>
<h3 id="合法标识符"><a href="#合法标识符" class="headerlink" title="合法标识符"></a>合法标识符</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">_a_b_c _abc  </span><br><span class="line">_1_2_3  _dc  </span><br><span class="line">_ABC ABC abc</span><br></pre></td></tr></table></figure>
<h3 id="不合法标识符"><a href="#不合法标识符" class="headerlink" title="不合法标识符"></a>不合法标识符</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GUI  小周 1abc</span><br><span class="line">float</span><br></pre></td></tr></table></figure>
<h2 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h2><ol>
<li>驼峰命名法，首字母小写，后面每个单词首字母大写。</li>
<li>见名知意</li>
</ol>
<h2 id="C语言的常量-与变量"><a href="#C语言的常量-与变量" class="headerlink" title="C语言的常量 与变量"></a>C语言的常量 与变量</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> c=a+b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="C语言的基本数据类型"><a href="#C语言的基本数据类型" class="headerlink" title="C语言的基本数据类型"></a>C语言的基本数据类型</h2>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3 学习笔记</title>
    <url>/2024/11/12/30/</url>
    <content><![CDATA[<h2 id="Python-3-教程入门"><a href="#Python-3-教程入门" class="headerlink" title="Python 3 教程入门"></a>Python 3 教程入门</h2><h3 id="一、Python-简介"><a href="#一、Python-简介" class="headerlink" title="一、Python 简介"></a>一、Python 简介</h3><p>Python 是一种解释型、动态类型和高级的编程语言，支持多种编程范式，包括面向对象、函数式编程等。它广泛应用于数据科学、Web 开发、自动化等领域，尤其适合编程新手。</p>
<h3 id="二、安装-Python-3"><a href="#二、安装-Python-3" class="headerlink" title="二、安装 Python 3"></a>二、安装 Python 3</h3><p>在 Windows 上安装 Python 3：</p>
<ol>
<li><p><strong>下载 Python 3</strong><br>打开 <a href="https://www.python.org/downloads/windows/">Python 官网</a>，下载最新的 Python 3 安装包。</p>
</li>
<li><p><strong>安装 Python 3</strong><br>双击安装包，勾选 “Add Python 3.x to PATH” 以便后续命令行调用。点击 “Install Now” 进行安装。</p>
</li>
<li><p><strong>检查安装</strong><br>打开命令提示符，输入以下命令查看版本号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure>
<p>若能看到 Python 版本号，表示安装成功。</p>
</li>
</ol>
<h3 id="三、Python-第一个程序"><a href="#三、Python-第一个程序" class="headerlink" title="三、Python 第一个程序"></a>三、Python 第一个程序</h3><p>使用任何文本编辑器（如记事本、VS Code）创建文件 <code>hello.py</code>，并输入以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>保存文件后，在命令提示符中运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></table></figure>

<p>若输出 <code>Hello, World!</code>，表示 Python 运行成功！</p>
<hr>
<h2 id="Python-3-基础知识"><a href="#Python-3-基础知识" class="headerlink" title="Python 3 基础知识"></a>Python 3 基础知识</h2><h3 id="1-变量和数据类型"><a href="#1-变量和数据类型" class="headerlink" title="1. 变量和数据类型"></a>1. 变量和数据类型</h3><p>Python 中变量无需声明类型，可直接赋值使用。示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;Alice&quot;</span>       <span class="comment"># 字符串类型</span></span><br><span class="line">age = <span class="number">25</span>             <span class="comment"># 整数类型</span></span><br><span class="line">height = <span class="number">1.68</span>        <span class="comment"># 浮点数类型</span></span><br><span class="line">is_student = <span class="literal">True</span>    <span class="comment"># 布尔类型</span></span><br></pre></td></tr></table></figure>

<p>常见的数据类型有：</p>
<ul>
<li><strong>整数（int）</strong>：如 <code>10</code></li>
<li><strong>浮点数（float）</strong>：如 <code>3.14</code></li>
<li><strong>字符串（str）</strong>：如 <code>&quot;Hello&quot;</code></li>
<li><strong>布尔（bool）</strong>：<code>True</code> 或 <code>False</code></li>
</ul>
<h3 id="2-基本运算符"><a href="#2-基本运算符" class="headerlink" title="2. 基本运算符"></a>2. 基本运算符</h3><p>Python 支持四则运算和逻辑运算，示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数学运算</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a + b)       <span class="comment"># 加法，输出 13</span></span><br><span class="line"><span class="built_in">print</span>(a - b)       <span class="comment"># 减法，输出 7</span></span><br><span class="line"><span class="built_in">print</span>(a * b)       <span class="comment"># 乘法，输出 30</span></span><br><span class="line"><span class="built_in">print</span>(a / b)       <span class="comment"># 除法，输出 3.3333</span></span><br><span class="line"><span class="built_in">print</span>(a // b)      <span class="comment"># 整除，输出 3</span></span><br><span class="line"><span class="built_in">print</span>(a % b)       <span class="comment"># 取余，输出 1</span></span><br><span class="line"><span class="built_in">print</span>(a ** b)      <span class="comment"># 幂运算，输出 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算</span></span><br><span class="line">x = <span class="literal">True</span></span><br><span class="line">y = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">and</span> y)     <span class="comment"># 与运算，输出 False</span></span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">or</span> y)      <span class="comment"># 或运算，输出 True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> x)       <span class="comment"># 非运算，输出 False</span></span><br></pre></td></tr></table></figure>

<h3 id="3-条件语句"><a href="#3-条件语句" class="headerlink" title="3. 条件语句"></a>3. 条件语句</h3><p>使用 <code>if-elif-else</code> 语句进行条件判断：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = <span class="number">85</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;中等&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;需努力&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-循环语句"><a href="#4-循环语句" class="headerlink" title="4. 循环语句"></a>4. 循环语句</h3><p>Python 支持 <code>for</code> 循环和 <code>while</code> 循环。</p>
<h4 id="4-1-for-循环"><a href="#4-1-for-循环" class="headerlink" title="4.1 for 循环"></a>4.1 for 循环</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):    <span class="comment"># 输出 0 到 4</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">names = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:    <span class="comment"># 遍历列表</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure>

<h4 id="4-2-while-循环"><a href="#4-2-while-循环" class="headerlink" title="4.2 while 循环"></a>4.2 while 循环</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="5-函数"><a href="#5-函数" class="headerlink" title="5. 函数"></a>5. 函数</h3><p>函数是代码复用和组织的主要方式。定义一个函数使用 <code>def</code> 关键字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greet(<span class="string">&quot;Alice&quot;</span>))    <span class="comment"># 输出 Hello, Alice</span></span><br></pre></td></tr></table></figure>

<p>带默认参数的函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name=<span class="string">&quot;Stranger&quot;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greet())    <span class="comment"># 输出 Hello, Stranger</span></span><br></pre></td></tr></table></figure>

<h3 id="6-列表和字典"><a href="#6-列表和字典" class="headerlink" title="6. 列表和字典"></a>6. 列表和字典</h3><h4 id="6-1-列表"><a href="#6-1-列表" class="headerlink" title="6.1 列表"></a>6.1 列表</h4><p>列表是有序、可变的集合类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits[<span class="number">0</span>])        <span class="comment"># 访问元素，输出 &quot;apple&quot;</span></span><br><span class="line">fruits.append(<span class="string">&quot;orange&quot;</span>) <span class="comment"># 添加元素</span></span><br><span class="line"><span class="built_in">print</span>(fruits)           <span class="comment"># 输出 [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;orange&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="6-2-字典"><a href="#6-2-字典" class="headerlink" title="6.2 字典"></a>6.2 字典</h4><p>字典是键值对的集合，常用于存储关联数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">&quot;name&quot;</span>])    <span class="comment"># 访问键 &quot;name&quot;，输出 &quot;Alice&quot;</span></span><br><span class="line">person[<span class="string">&quot;age&quot;</span>] = <span class="number">30</span>       <span class="comment"># 修改值</span></span><br><span class="line"><span class="built_in">print</span>(person)            <span class="comment"># 输出 &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 30, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-文件操作"><a href="#7-文件操作" class="headerlink" title="7. 文件操作"></a>7. 文件操作</h3><p>Python 可以读取和写入文件。以下是一个简单的文件操作示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.read()</span><br><span class="line">    <span class="built_in">print</span>(content)    <span class="comment"># 输出 &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-错误和异常处理"><a href="#8-错误和异常处理" class="headerlink" title="8. 错误和异常处理"></a>8. 错误和异常处理</h3><p>Python 使用 <code>try-except</code> 语句来捕获异常：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数: &quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您输入的数字是:&quot;</span>, num)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入无效，请输入整数&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="9-类和对象"><a href="#9-类和对象" class="headerlink" title="9. 类和对象"></a>9. 类和对象</h3><p>Python 是一门面向对象的语言，支持类和对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Woof!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">my_dog = Dog(<span class="string">&quot;Buddy&quot;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(my_dog.name)    <span class="comment"># 输出 &quot;Buddy&quot;</span></span><br><span class="line"><span class="built_in">print</span>(my_dog.bark())  <span class="comment"># 输出 &quot;Woof!&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="10-常用模块"><a href="#10-常用模块" class="headerlink" title="10. 常用模块"></a>10. 常用模块</h3><p>Python 内置了许多有用的模块，例如 <code>math</code>、<code>datetime</code>、<code>random</code> 等：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 math 模块</span></span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">16</span>))  <span class="comment"># 输出 4.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 datetime 模块</span></span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line"><span class="built_in">print</span>(now)            <span class="comment"># 输出当前日期时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 random 模块</span></span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>, <span class="number">10</span>))  <span class="comment"># 输出 1 到 10 之间的随机整数</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2和Hive3结合</title>
    <url>/2024/11/13/48/</url>
    <content><![CDATA[<h1 id="SpringBoot2和Hive3结合"><a href="#SpringBoot2和Hive3结合" class="headerlink" title="SpringBoot2和Hive3结合"></a>SpringBoot2和Hive3结合</h1><h1 id="下载开发工具idea"><a href="#下载开发工具idea" class="headerlink" title="下载开发工具idea"></a>下载开发工具idea</h1><p><a href="https://www.jetbrains.com/idea/download/#section=windows">下载地址</a></p>
<h1 id="配置maven"><a href="#配置maven" class="headerlink" title="配置maven"></a>配置maven</h1><p><a href="https://blog.csdn.net/qq_57629629/article/details/143734290">maven配置</a></p>
<h1 id="配置hadoop"><a href="#配置hadoop" class="headerlink" title="配置hadoop"></a>配置hadoop</h1><p><a href="https://blog.csdn.net/qq_57629629/article/details/137977972">hadoop配置</a></p>
<h1 id="配置hive"><a href="#配置hive" class="headerlink" title="配置hive"></a>配置hive</h1><p><a href="https://blog.csdn.net/qq_57629629/article/details/137977972">hive配置</a></p>
<h1 id="配置springboot"><a href="#配置springboot" class="headerlink" title="配置springboot"></a>配置springboot</h1><p><a href="https://blog.csdn.net/qq_57629629/article/details/137977972">springboot配置</a></p>
<h1 id="配置hive-jdbc"><a href="#配置hive-jdbc" class="headerlink" title="配置hive-jdbc"></a>配置hive-jdbc</h1>]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 教程：从 0 到 1 的入门教程</title>
    <url>/2024/11/01/26/</url>
    <content><![CDATA[<p>欢迎来到 <a href="https://hexo.io/">Hexo</a>！在这个教程中，我们将一步一步带你搭建自己的博客。无论你是初学者还是有经验的开发者，Hexo 都能让你轻松创建和管理博客。</p>
<h2 id="为什么选择-Hexo？"><a href="#为什么选择-Hexo？" class="headerlink" title="为什么选择 Hexo？"></a>为什么选择 Hexo？</h2><ul>
<li><p><strong>快速</strong>：Hexo 使用静态文件生成，加载速度极快。</p>
</li>
<li><p><strong>简洁</strong>：Markdown 支持，让写作变得简单。</p>
</li>
<li><p><strong>丰富的主题</strong>：社区提供了多种主题选择，帮助你快速美化博客。</p>
<span id="more"></span></li>
</ul>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="1-安装-Hexo"><a href="#1-安装-Hexo" class="headerlink" title="1. 安装 Hexo"></a>1. 安装 Hexo</h3><p>确保你已经安装了 <a href="https://nodejs.org/">Node.js</a>。接下来，打开终端，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h3 id="2-创建新博客"><a href="#2-创建新博客" class="headerlink" title="2. 创建新博客"></a>2. 创建新博客</h3><p>在你想要创建博客的目录下，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init my-blog</span><br><span class="line">$ <span class="built_in">cd</span> my-blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h3 id="3-创建新帖子"><a href="#3-创建新帖子" class="headerlink" title="3. 创建新帖子"></a>3. 创建新帖子</h3><p>创建新帖子非常简单，使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;my new post&quot;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>source/_posts/</code> 目录下，你会看到新生成的 Markdown 文件。</p>
<h3 id="4-启动本地服务器"><a href="#4-启动本地服务器" class="headerlink" title="4. 启动本地服务器"></a>4. 启动本地服务器</h3><p>运行以下命令启动本地服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>然后在浏览器中访问 <a href="http://localhost:4000/">http://localhost:4000</a>，你就能看到你的博客了！</p>
<h3 id="5-生成静态文件"><a href="#5-生成静态文件" class="headerlink" title="5. 生成静态文件"></a>5. 生成静态文件</h3><p>当你准备好发布博客时，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>这会在 <code>public/</code> 目录下生成静态文件。</p>
<h3 id="6-部署到远程网站"><a href="#6-部署到远程网站" class="headerlink" title="6. 部署到远程网站"></a>6. 部署到远程网站</h3><p>配置好 <code>_config.yml</code> 文件中的部署信息后，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>你的博客就会被部署到远程服务器上！</p>
<h2 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h2><p>Hexo 的配置文件 <code>_config.yml</code> 中有很多高级选项，例如自定义域名、评论系统、SEO 等。你可以在文档中找到更多信息。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>如果在使用过程中遇到问题，可以参考 <a href="https://hexo.io/docs/">Hexo 文档</a> 或在 <a href="https://github.com/hexojs/hexo/issues">GitHub Issues</a> 提问。</p>
<h2 id="更多资源"><a href="#更多资源" class="headerlink" title="更多资源"></a>更多资源</h2><ul>
<li><a href="https://hexo.io/docs/">Hexo 官方文档</a></li>
<li><a href="https://hexo.io/themes/">Hexo 主题</a></li>
<li><a href="https://hexo.io/plugins/">Hexo 插件</a></li>
<li><a href="https://talk.hexo.io/">Hexo 官方论坛</a></li>
<li><a href="https://github.com/hexojs/awesome-hexo">Hexo 社区</a></li>
<li><a href="https://hexo.io/blog/">Hexo 官方博客</a></li>
<li><a href="https://github.com/hexojs/hexo">Hexo 官方仓库</a></li>
</ul>
]]></content>
      <tags>
        <tag>hexo教程</tag>
      </tags>
  </entry>
  <entry>
    <title>项目三：11.2网络地址转换实训-外部PC访问内网服务器增加配置</title>
    <url>/2024/11/08/00/</url>
    <content><![CDATA[<ul>
<li><strong>FW1</strong>：防火墙</li>
<li><strong>Router-R1</strong>：路由器</li>
<li><strong>Server-Server1</strong>：服务器</li>
<li><strong>Client-Client1</strong>：客户端</li>
</ul>
<h3 id="设备-1：FW1（防火墙）"><a href="#设备-1：FW1（防火墙）" class="headerlink" title="设备 1：FW1（防火墙）"></a>设备 1：FW1（防火墙）</h3><h4 id="1-配置接口-IP-地址并加入-DMZ-区域"><a href="#1-配置接口-IP-地址并加入-DMZ-区域" class="headerlink" title="1. 配置接口 IP 地址并加入 DMZ 区域"></a>1. 配置接口 IP 地址并加入 DMZ 区域</h4><ol>
<li>进入防火墙配置模式。</li>
<li>在防火墙上配置接口 <code>GE0/0/3</code> 的 IP 地址，并将接口加入 DMZ 区域。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入系统视图</span></span><br><span class="line">system-view</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置接口 IP 地址</span></span><br><span class="line">interface GigabitEthernet 0/0/3</span><br><span class="line"> ip address 192.168.6.1 255.255.255.0</span><br><span class="line"> quit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将接口加入 DMZ 区域</span></span><br><span class="line">firewall zone dmz</span><br><span class="line"> add interface GigabitEthernet 0/0/3</span><br><span class="line"> quit</span><br></pre></td></tr></table></figure>

<h4 id="2-配置-NAT-服务器"><a href="#2-配置-NAT-服务器" class="headerlink" title="2. 配置 NAT 服务器"></a>2. 配置 NAT 服务器</h4><p>NAT 服务器配置会将外部访问 <code>1.1.1.1</code> 的 HTTP 请求映射到内部服务器 <code>192.168.6.2</code> 的 HTTP 服务上。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NAT 服务器映射配置</span></span><br><span class="line">nat server zone untrust protocol tcp global 1.1.1.1 www inside 192.168.6.2 www</span><br></pre></td></tr></table></figure>

<h4 id="3-配置防火墙策略"><a href="#3-配置防火墙策略" class="headerlink" title="3. 配置防火墙策略"></a>3. 配置防火墙策略</h4><p>允许从非信任区（untrust）到 DMZ 区域的 HTTP 访问流量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置从非信任区到 DMZ 的策略</span></span><br><span class="line">policy interzone dmz untrust inbound</span><br><span class="line"> policy 1</span><br><span class="line">  action permit</span><br><span class="line">  policy service service-set http</span><br><span class="line">  policy destination 192.168.6.0 0.0.0.255</span><br><span class="line"> quit</span><br></pre></td></tr></table></figure>

<h4 id="4-配置路由（可选）"><a href="#4-配置路由（可选）" class="headerlink" title="4. 配置路由（可选）"></a>4. 配置路由（可选）</h4><p>如果防火墙没有到 DMZ 网络的静态路由，可以添加以下路由：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加静态路由（如果需要）</span></span><br><span class="line">ip route-static 192.168.6.0 24 192.168.6.1</span><br></pre></td></tr></table></figure>
<h4 id="5-检查-NAT-和策略配置"><a href="#5-检查-NAT-和策略配置" class="headerlink" title="5. 检查 NAT 和策略配置"></a>5. 检查 NAT 和策略配置</h4><p>使用 display nat server 检查 NAT 配置。<br>使用 display firewall session table 查看是否有针对 HTTP 请求的会话记录。</p>
<h4 id="6-检查日志（调试用）"><a href="#6-检查日志（调试用）" class="headerlink" title="6. 检查日志（调试用）"></a>6. 检查日志（调试用）</h4><p>如果配置完成后仍然无法访问，可以检查防火墙日志来确认流量是否被阻挡。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">display logbuffer</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="设备-2：Router-R1（路由器）"><a href="#设备-2：Router-R1（路由器）" class="headerlink" title="设备 2：Router-R1（路由器）"></a>设备 2：Router-R1（路由器）</h3><p>路由器配置主要确保连接防火墙和客户端的路由通畅。</p>
<h4 id="配置接口-IP-地址"><a href="#配置接口-IP-地址" class="headerlink" title="配置接口 IP 地址"></a>配置接口 IP 地址</h4><p>根据拓扑图，确保路由器接口的 IP 地址已正确配置（如下）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">system-view</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 GE0/0/2 接口的 IP 地址（连接防火墙）</span></span><br><span class="line">interface GigabitEthernet 0/0/2</span><br><span class="line"> ip address 1.1.1.2 255.255.255.0</span><br><span class="line"> quit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 GE0/0/1 接口的 IP 地址（连接客户端）</span></span><br><span class="line">interface GigabitEthernet 0/0/1</span><br><span class="line"> ip address 2.1.1.1 255.255.255.0</span><br><span class="line"> quit</span><br></pre></td></tr></table></figure>

<h4 id="配置静态路由"><a href="#配置静态路由" class="headerlink" title="配置静态路由"></a>配置静态路由</h4><p>确保路由器有通往 <code>192.168.6.0/24</code> 的路由。如果需要，可以添加如下静态路由。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加静态路由到 DMZ 网络</span></span><br><span class="line">ip route-static 192.168.6.0 24 1.1.1.1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入系统视图</span></span><br><span class="line">system-view</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加静态路由到 DMZ 网络，下一跳指向防火墙的 IP 地址 1.1.1.1</span></span><br><span class="line">ip route-static 192.168.6.0 24 1.1.1.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前路由表</span></span><br><span class="line">display ip routing-table</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="设备-3：Server-Server1（服务器）"><a href="#设备-3：Server-Server1（服务器）" class="headerlink" title="设备 3：Server-Server1（服务器）"></a>设备 3：Server-Server1（服务器）</h3><p>服务器应位于 DMZ 区域，且 IP 地址为 <code>192.168.6.2/24</code>。</p>
<h4 id="配置服务器-IP-地址"><a href="#配置服务器-IP-地址" class="headerlink" title="配置服务器 IP 地址"></a>配置服务器 IP 地址</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">假设服务器为 Linux 系统，配置 IP 地址如下</span></span><br><span class="line">ifconfig eth0 192.168.6.2 netmask 255.255.255.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认网关（指向防火墙）</span></span><br><span class="line">route add default gw 192.168.6.1</span><br></pre></td></tr></table></figure>

<p>确保服务器的 HTTP 服务正常运行，例如使用 Apache 或 Nginx，且监听在 <code>80</code> 端口。</p>
<hr>
<h3 id="设备-4：Client-Client1（客户端）"><a href="#设备-4：Client-Client1（客户端）" class="headerlink" title="设备 4：Client-Client1（客户端）"></a>设备 4：Client-Client1（客户端）</h3><p>客户端应在非信任区，并通过 IP <code>2.1.1.2</code> 访问。</p>
<h4 id="配置客户端-IP-地址"><a href="#配置客户端-IP-地址" class="headerlink" title="配置客户端 IP 地址"></a>配置客户端 IP 地址</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">假设客户端为 Linux 系统，配置 IP 地址如下</span></span><br><span class="line">ifconfig eth0 2.1.1.2 netmask 255.255.255.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认网关（指向路由器）</span></span><br><span class="line">route add default gw 2.1.1.1</span><br></pre></td></tr></table></figure>

<h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><ol>
<li><p><strong>从 Client-Client1 测试访问</strong>：在客户端通过浏览器或 <code>curl</code> 命令访问 <code>http://1.1.1.1</code>，检查是否能访问到服务器页面。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://1.1.1.1</span><br></pre></td></tr></table></figure></li>
<li><p><strong>检查防火墙日志</strong>（在 FW1 上）：如果访问失败，请检查防火墙日志以排查问题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">display logbuffer</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="保存配置"><a href="#保存配置" class="headerlink" title="保存配置"></a>保存配置</h3><p>在 FW1 和 Router-R1 上保存配置，以确保重启后配置不丢失。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">save</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>计算机网络ensp教程</tag>
      </tags>
  </entry>
</search>
